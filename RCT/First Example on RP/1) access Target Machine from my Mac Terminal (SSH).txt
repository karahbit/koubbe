How to access Target Machine from my Mac Terminal:

1) from my Mac Terminal:  cd .ssh
2) from my Mac Terminal: Generate new RSA key ==> ssh-keygen -t rsa
3)  from my Mac Terminal: Get your Public RSA key ==> vi /Users/karahbit/.ssh/id_rsa.pub
(can use less instead of vi to make sure not to edit my key)
4) Copy the content of the RSA key
5) log in to the Target Machine
6) From Target Machine: cd .ssh
7) From Target Machine: vi authorized_keys
8) paste it in the end of the file (leave a space between paragraphs)
9) chmod 600 authorized_keys

Now, every time I want to access Jetstream Atmosphere from my Mac Terminal, I just do this:
	ssh karahbit@129.114.104.13

(the IP Address I got it from my VM instance in Jetstream website). All I need to do is install RCT from Jetstream Atmosphere

Note: Instead of using Jetstream Atmosphere, I could use RADICAL's machines (ask for login and initial password, then change it using passwd command). The server name is two.radical-project.org. Retrieve the IP using ping or host command followed by the server name.

Also: Do setup a password-less ssh login from the Target Machine to itself (for local.localhost)


How to access Bridges?

1) From Jetstream Atmosphere: Generate certificate for 72 hours ==> myproxy-logon -s myproxy.xsede.org -l karahbit -t 72
(enter XSEDE profile password)
2) From Jetstream Atmosphere: 
sudo ln -s /usr/local/globus-6/bin/gsiscp /usr/bin/gsiscp
sudo ln -s /usr/local/globus-6/bin/gsisftp /usr/bin/gsisftp
sudo ln -s /usr/local/globus-6/bin/gsissh /usr/bin/gsissh
sudo ln -s /usr/local/globus-6/bin/gsissh-add /usr/bin/gsissh-add
sudo ln -s /usr/local/globus-6/bin/gsissh-agent /usr/bin/gsissh-agent
sudo ln -s /usr/local/globus-6/bin/gsissh-keygen /usr/bin/gsissh-keygen
sudo ln -s /usr/local/globus-6/bin/gsissh-keyscan /usr/bin/gsissh-keyscan

Do Andre's command instead of above:
export PATH="$PATH:/usr/local/globus-6/bin/"
3) From Jetstream Atmosphere: gsissh -p 2222 bridges.psc.xsede.org
4) Run the task in Bridges (with the resources modified for it):
export RADICAL_PILOT_VERBOSE=DEBUG
export RADICAL_PILOT_PROFILE=TRUE
in /home/karahbit/ve/share/radical.pilot/examples/00_getting_started.py ===>
        pd_init = {'resource'      : 'xsede.bridges',
                   'runtime'       : 30,  # pilot runtime (min)
                   'exit_on_error' : True,
                   'project'       : 'mc3bggp',
                   'queue'         : 'RM',
                   'access_schema' : 'gsissh',
                   'cores'         : 32,
                  }
and run:
python 00_getting_started.py

To see queue's names (partitions), run from bridges:
sinfo
squeue -u karahbit
squeue -u karahbit --long
To se project names, run from bridges:
projects

If running with anaconda on localhost:
/home/karahbit/ve/share/radical.pilot/examples/config.json ===>
Add after local.localhost:
    "local.localhost_anaconda":{
        "project"  : null,
        "queue"    : null,
        "schema"   : null,
        "cores"    : 1,
        "gpus"     : 2
    },
and run:
python 00_getting_started.py local.localhost_anaconda


How to access XSEDE SSO Hub?
ssh -l karahbit login.xsede.org
authenticate through Duo


How to access Comet?
gsissh comet.sdsc.xsede.org


Check credential status
grid-proxy-info


Check list of hosts
xsede-gsissh-hosts

How to access Stampede2?
ssh tg859507@stampede2.tacc.utexas.edu
after setting up phone number:
gsissh -p 2222 stampede2.tacc.xsede.org
to enable python3:
module load python3
To submit to Stampede2:
            pd_init = {'resource'   : xsede.stampede2_ssh,
                    'runtime'       : 10,  # pilot runtime (min)
                    'exit_on_error' : True,
                    'project'       : 'TG-MCB090174',
                    'queue'         : 'development',
                    'access_schema' : 'gsissh',
                    'cores'         : 8
                    }