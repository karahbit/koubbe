Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu
OSVersion: bionic

%labels

    APPLICATION_NAME meep
    APPLICATION_VERSION 1.13.1
    APPLICATION_URL https://www.open-mpi.org/

    SINGULARITY_VERSION 2.6.1
    SINGULARITY_IMAGE_SIZE 2048

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20200312

%setup

%environment

    # Set system locale
    export LC_ALL=C

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    # Set paths to OSU Microbenchmarks binaries
    export PATH="/opt/omb-5.6.2/collective:${PATH}"
    export PATH="/opt/omb-5.6.2/one-sided:${PATH}"
    export PATH="/opt/omb-5.6.2/pt2pt:${PATH}"
    export PATH="/opt/omb-5.6.2/startup:${PATH}"

    # Set paths to MEEP and its dependencies
    export PATH="/opt/harminv-1.4.1/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/harminv-1.4.1/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/libctl-4.5.0/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/libctl-4.5.0/lib:${LD_LIBRARY_PATH}"
    export LD_LIBRARY_PATH="/opt/zlib-1.2.11/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/hdf5-1.10.1/hdf5/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/hdf5-1.10.1/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/h5utils-1.13.1/bin:${PATH}"
    export PATH="/opt/fftw-3.3.7/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/fftw-3.3.7/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/mpb-1.10.0/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/mpb-1.10.0/lib:${LD_LIBRARY_PATH}"
    export PATH="/opt/meep-1.13.1/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/meep-1.13.1/lib:${LD_LIBRARY_PATH}"
    export PYTHONPATH='/opt/meep-1.13.1/lib/python3.6/site-packages'

%post -c /bin/bash

    # Set system locale
    export LC_ALL=C

    # Install system metapackages
    apt-get -y install ubuntu-standard
    apt-get -y install ubuntu-server

    # Add repositories
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install common packages from 'main'
    apt-get -y install autoconf
    apt-get -y install automake
    apt-get -y install build-essential
    apt-get -y install cmake
    apt-get -y install libtool
    apt-get -y install gfortran
    apt-get -y install pkg-config
    apt-get -y install wget
    apt-get -y install zip

    # Install expect to automate responses for interactive build questions
    apt-get -y install expect

    # Use /tmp to store temporary files within the container during the
    # bootstraping process
    cd /tmp

    # Install basic drivers for user space access to Ethernet, RDMA,
    # and Infiniband. See https://community.mellanox.com/docs/DOC-2431
    apt-get -y install dkms
    apt-get -y install infiniband-diags
    apt-get -y install libibverbs-dev
    apt-get -y install ibacm
    apt-get -y install librdmacm-dev
    apt-get -y install libmlx4-dev
    apt-get -y install libmlx5-dev
    apt-get -y install mstflint
    apt-get -y install libibcm-dev
    apt-get -y install libibmad-dev
    apt-get -y install libibumad-dev
    apt-get -y install opensm
    apt-get -y install srptools

    # Install additional tools
    apt-get -y install ibutils
    apt-get -y install ibverbs-utils
    apt-get -y install rdmacm-utils
    apt-get -y install perftest
    apt-get -y install numactl
    apt-get -y install libnuma-dev

    # Install libnl
    apt-get -y install libnl-3-200
    apt-get -y install libnl-route-3-200
    apt-get -y install libnl-route-3-dev
    apt-get -y install libnl-utils

    # Install OpenMPI dependencies
    apt-get -y install zlib1g-dev

    # Download, build, and install OpenMPI
    wget https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.4.tar.gz
    tar -xzvf openmpi-3.1.4.tar.gz
    cd openmpi-3.1.4
    ./configure --prefix=/opt/openmpi-3.1.4
    make all install

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    cd /tmp
w
    # Download, build, and install OSU Microbenchmarks
    wget http://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-5.6.2.tar.gz
    tar -xzvf osu-micro-benchmarks-5.6.2.tar.gz
    cd osu-micro-benchmarks-5.6.2
    ./configure --prefix='/opt/omb-5.6.2' CC='mpicc' CXX='mpicxx'
    make
    make install

    # Reorganize OSU Microbenchmarks directory structure
    cd /opt/omb-5.6.2
    mv libexec/osu-micro-benchmarks/mpi/collective ./
    mv libexec/osu-micro-benchmarks/mpi/one-sided ./
    mv libexec/osu-micro-benchmarks/mpi/pt2pt ./
    mv libexec/osu-micro-benchmarks/mpi/startup ./
    rm -rf libexec

    # Set paths to OSU Microbenchmarks binaries
    export PATH="/opt/omb-5.6.2/collective:${PATH}"
    export PATH="/opt/omb-5.6.2/one-sided:${PATH}"
    export PATH="/opt/omb-5.6.2/pt2pt:${PATH}"
    export PATH="/opt/omb-5.6.2/startup:${PATH}"

    # Install MEEP dependencies
    apt-get -y install libopenblas-base
    apt-get -y install libopenblas-dev
    apt-get -y install libgmp-dev
    apt-get -y install libgsl-dev
    apt-get -y install libpng-dev
    apt-get -y install swig
    apt-get -y install guile-2.0-dev
    apt-get -y install python3-dev
    apt-get -y install python3-pip
    apt-get -y install python3-pkgconfig
    apt-get -y install python3-numpy
    apt-get -y install python3-scipy
    apt-get -y install python3-matplotlib
    apt-get -y install cython3
    apt-get -y install ffmpeg

    cd /opt

    # Download, build, and install Harminv
    wget https://github.com/NanoComp/harminv/releases/download/v1.4.1/harminv-1.4.1.tar.gz
    tar -xf harminv-1.4.1.tar.gz
    cd harminv-1.4.1
    ./configure --prefix='/opt/harminv-1.4.1' --enable-shared
    make
    make install
  
    export PATH="/opt/harminv-1.4.1/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/harminv-1.4.1/lib:${LD_LIBRARY_PATH}"

    cd /opt

    # Download, build, and install libctl
    wget https://github.com/NanoComp/libctl/releases/download/v4.5.0/libctl-4.5.0.tar.gz
    tar -xf libctl-4.5.0.tar.gz
    cd libctl-4.5.0
    ./configure --prefix='/opt/libctl-4.5.0' --enable-shared
    make
    make install

    export PATH="/opt/libctl-4.5.0/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/libctl-4.5.0/lib:${LD_LIBRARY_PATH}"

    cd /tmp

    # Download, build and install zlib
    wget http://zlib.net/zlib-1.2.11.tar.gz
    tar -xf zlib-1.2.11.tar.gz
    cd zlib-1.2.11
    ./configure --prefix='/opt/zlib-1.2.11'
    make
    make install

    export LD_LIBRARY_PATH="/opt/zlib-1.2.11/lib:${LD_LIBRARY_PATH}"

    cd /tmp

    # Download, build, and install HDF5
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.1/src/hdf5-1.10.1.tar.gz
    tar -xf hdf5-1.10.1.tar.gz
    cd hdf5-1.10.1
    ./configure CC=mpicc CXX=mpic++ --prefix='/opt/hdf5-1.10.1' --enable-parallel --enable-fortran --enable-shared --with-zlib='/opt/zlib-1.2.11'
    make
    make install

    export PATH="/opt/hdf5-1.10.1/hdf5/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/hdf5-1.10.1/lib:${LD_LIBRARY_PATH}"

    cd /tmp

    # Download, build, and install h5utils
    wget https://github.com/NanoComp/h5utils/releases/download/1.13.1/h5utils-1.13.1.tar.gz
    tar -xf h5utils-1.13.1.tar.gz
    cd h5utils-1.13.1
    ./configure CC='mpicc' CPPFLAGS='-I/opt/hdf5-1.10.1/include' LDFLAGS='-L/opt/hdf5-1.10.1/lib' --prefix='/opt/h5utils-1.13.1'
    make
    make install

    export PATH="/opt/h5utils-1.13.1/bin:${PATH}"

    cd /tmp

    # Download, build, and install FFTW3
    wget http://www.fftw.org/fftw-3.3.7.tar.gz
    tar -xf fftw-3.3.7.tar.gz
    cd fftw-3.3.7
    ./configure CC='mpicc' CFLAGS='-fPIC' --prefix='/opt/fftw-3.3.7' --enable-avx2 --enable-threads --enable-openmp --enable-mpi
    make
    make install
    
    export PATH="/opt/fftw-3.3.7/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/fftw-3.3.7/lib:${LD_LIBRARY_PATH}"

    cd /opt

    # Download, build, and install mpb
    wget https://github.com/NanoComp/mpb/releases/download/v1.10.0/mpb-1.10.0.tar.gz
    tar -xf mpb-1.10.0.tar.gz
    cd mpb-1.10.0
    ./configure CC='mpicc' CXX='mpic++' CPPFLAGS='-I/opt/hdf5-1.10.1/hdf5/include -I/opt/libctl-4.5.0/include -I/opt/fftw-3.3.7/include' LDFLAGS='-L/opt/hdf5-1.10.1/hdf5/lib -L/opt/libctl-4.5.0/lib -L/opt/fftw-3.3.7/lib' --prefix='/opt/mpb-1.10.0' --with-libctl='/opt/libctl-4.5.0' --enable-shared --with-openmp
    make
    make install
    make distclean
    ./configure CC='mpicc' CXX='mpic++' CPPFLAGS='-I/opt/hdf5-1.10.1/hdf5/include -I/opt/libctl-4.5.0/include -I/opt/fftw-3.3.7/include' LDFLAGS='-L/opt/hdf5-1.10.1/hdf5/lib -L/opt/libctl-4.5.0/lib -L/opt/fftw-3.3.7/lib' --prefix='/opt/mpb-1.10.0' --with-libctl='/opt/libctl-4.5.0' --enable-shared --with-mpi
    make
    make install

    export PATH="/opt/mpb-1.10.0/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/mpb-1.10.0/lib:${LD_LIBRARY_PATH}"

    cd /tmp

    # Download, build, and install mpi4py
    wget https://bitbucket.org/mpi4py/mpi4py/downloads/mpi4py-3.0.3.tar.gz
    tar -xf mpi4py-3.0.3.tar.gz
    cd mpi4py-3.0.3
    python3 setup.py build
    python3 setup.py install

    cd /tmp

    # Download, build, and install h5py
    wget https://github.com/h5py/h5py/releases/download/2.10.0/h5py-2.10.0.tar.gz
    tar -xf h5py-2.10.0.tar.gz
    cd h5py-2.10.0
    export CC='mpicc'
    python3 setup.py configure --hdf5='/opt/hdf5-1.10.1' --hdf5-version='1.10.1' --mpi
    python3 setup.py build
    python3 setup.py install

    cd /opt

    # Dowload, build, and install MEEP
    wget https://github.com/NanoComp/meep/releases/download/v1.13.1/meep-1.13.1.tar.gz
    tar -xf meep-1.13.1.tar.gz
    cd meep-1.13.1
    ./configure CC='mpicc' CXX='mpic++' PYTHON='python3' CPPFLAGS='-I/opt/harminv-1.4.1/include -I/opt/hdf5-1.10.1/include -I/opt/libctl-4.5.0/include -I/opt/fftw-3.3.7/include -I/opt/mpb-1.10.0/include' LDFLAGS='-L/opt/harminv-1.4.1/lib -L/opt/hdf5-1.10.1/lib -L/opt/libctl-4.5.0/lib -L/opt/fftw-3.3.7/lib -L/opt/mpb-1.10.0/lib' --prefix='/opt/meep-1.13.1' --with-libctl='/opt/libctl-4.5.0' --enable-shared --with-mpi
    make
    make install

    export PATH="/opt/meep-1.13.1/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/meep-1.13.1/lib:${LD_LIBRARY_PATH}"
    export PYTHONPATH='/opt/meep-1.13.1/lib/python3.6/site-packages'

    # Clean up /tmp directory
    cd /tmp
    rm Miniconda3-latest-Linux-x86_64.sh
    rm *.deb
    rm -rf openmpi-3.1.4*
    rm -rf osu-micro-benchmarks-5.6.2*

    # Update database for mlocate
    updatedb

%files

%runscript

%test
