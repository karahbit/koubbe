Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu
OSVersion: bionic

%labels

    APPLICATION_NAME pytorch
    APPLICATION_VERSION 1.4.0
    APPLICATION_URL http://pytorch.org

    SINGULARITY_VERSION 2.6.1
    SINGULARITY_IMAGE_SIZE 16384

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20200225

%setup

%environment

    # Set system locale
    export LC_ALL=C

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    # Set default miniconda environment
    export PATH="/opt/miniconda3/bin:${PATH}"

%post -c /bin/bash

    # Set system locale
    export LC_ALL=C

    # Install system metapackages
    apt-get -y install ubuntu-standard
    apt-get -y install ubuntu-server

    # Add repositories
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install common packages from 'main'
    apt-get -y install autoconf
    apt-get -y install automake
    apt-get -y install build-essential
    apt-get -y install cmake
    apt-get -y install libtool
    apt-get -y install gfortran
    apt-get -y install pkg-config
    apt-get -y install wget
    apt-get -y install zip

    # Install expect to automate responses for interactive build questions
    apt-get -y install expect

    # Use /tmp to store temporary files within the container during the
    # bootstraping process
    cd /tmp

    # Install miniconda3
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    chmod +x Miniconda3-latest-Linux-x86_64.sh
    ./Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3

    # Install basic drivers for user space access to Ethernet, RDMA,
    # and Infiniband. See https://community.mellanox.com/docs/DOC-2431
    apt-get -y install dkms
    apt-get -y install infiniband-diags
    apt-get -y install libibverbs-dev
    apt-get -y install ibacm
    apt-get -y install librdmacm-dev
    apt-get -y install libmlx4-dev
    apt-get -y install libmlx5-dev
    apt-get -y install mstflint
    apt-get -y install libibcm-dev
    apt-get -y install libibmad-dev
    apt-get -y install libibumad-dev
    apt-get -y install opensm
    apt-get -y install srptools

    # Install additional tools
    apt-get -y install ibutils
    apt-get -y install ibverbs-utils
    apt-get -y install rdmacm-utils
    apt-get -y install perftest
    apt-get -y install numactl
    apt-get -y install libnuma-dev

    # Install libnl
    apt-get -y install libnl-3-200
    apt-get -y install libnl-route-3-200
    apt-get -y install libnl-route-3-dev
    apt-get -y install libnl-utils

    # Install OpenMPI dependencies
    apt-get -y install zlib1g-dev

    # Download, build, and install OpenMPI
    wget https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.4.tar.gz
    tar -xzvf openmpi-3.1.4.tar.gz
    cd openmpi-3.1.4
    ./configure --prefix=/opt/openmpi-3.1.4
    make all install

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    # Setup conda environment
    export PATH="/opt/miniconda3/bin:${PATH}"
    export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}

    # Install common python packages 
    conda install -y jupyterlab
    conda install -y numpy
    conda install -y matplotlib
    conda install -y pandas
    conda install -y plotly
    conda install -y scipy
    conda install -y scikit-learn
    conda install -y scikit-image
    conda install -y seaborn
    conda install -y statsmodels
    conda install -y opencv

    # Install GPU-accelerated python packages
    conda install -y numba

    # Install additional python packages
    conda install -y astropy
    conda install -y biopython
    conda install -y h5py
    conda install -y nltk
    conda install -y sympy

    # Install PyTorch dependencies 
    conda install -y numpy
    conda install -y ninja
    conda install -y pyyaml
    conda install -y mkl
    conda install -y mkl-include
    conda install -y setuptools
    conda install -y cmake
    conda install -y cffi

    cd /opt

    # Download, build, and install PyTorch
    git clone --recursive https://github.com/pytorch/pytorch
    cd pytorch
    git checkout v1.4.0
    git submodule sync
    git submodule update --init --recursive

    export CC='mpicc'
    export CXX='mpicxx'
    export CFLAGS='-mtune=generic'

    export BLAS='MKL'
    export USE_FBGEMM=1
    export USE_MKLDNN=1
    export USE_NNPACK=1
    export USE_NUMPY=1
    export USE_QNNPACK=1

    export USE_DISTRIBUTED=1
    export USE_IBVERBS=1
    export USE_GLOO=1
    export USE_MPI=1
    export USE_C10D_MPI=1
    export USE_NCCL=0
    export USE_SYSTEM_NCCL=0
    export NCCL_INCLUDE_DIR='/usr/include'

    export USE_OPENMP=1
    export ATEN_THREADING='OMP'
    export MKL_THREADING='OMP'

    export TORCH_CUDA_ARCH_LIST='NONE'
    export USE_CUDA=0
    export USE_CUDNN=0

    export USE_FFMPEG=0
    export USE_OPENCV=1

    python setup.py install

    # Download and install vision package for PyTorch
    git clone https://github.com/pytorch/vision.git
    cd vision
    git checkout v0.5.0
    python setup.py install

    cd ../

    # Download and install text package for PyTorch
    git clone https://github.com/pytorch/text.git
    cd text
    git checkout 0.5.0
    python setup.py install

    cd ../

    # Download and install audio package for PyTorch
    git clone https://github.com/pytorch/audio.git
    cd audio
    git checkout v0.4.0
    python setup.py install

    cd ../

    # Download examples for PyTorch
    git clone https://github.com/pytorch/examples.git

    cd /opt

    # Install fastai for PyTorch
    git clone https://github.com/fastai/fastai
    cd fastai
    git checkout 1.0.60
    tools/run-after-git-clone
    pip install -e ".[dev]"

    # Clean up /tmp directory
    cd /tmp
    rm Miniconda3-latest-Linux-x86_64.sh
    rm *.deb
    rm -rf openmpi-3.1.4*

    # Update database for mlocate
    updatedb


%files

%runscript

%test
