Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu
OSVersion: bionic

%labels

    APPLICATION_NAME pytorch
    APPLICATION_VERSION 1.4.0
    APPLICATION_URL http://pytorch.org

    SINGULARITY_VERSION 2.6.1
    SINGULARITY_IMAGE_SIZE 32768

    AUTHOR_NAME Marty Kandes
    AUTHOR_EMAIL mkandes@sdsc.edu

    LAST_UPDATED 20200303

%setup

%environment

    # Set system locale
    export LC_ALL=C

    # Set paths to CUDA binaries and libraries
    export PATH="/usr/local/cuda-10.1/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    # Set default miniconda environment
    export PATH="/opt/miniconda3/bin:${PATH}"

%post -c /bin/bash

    # Set system locale
    export LC_ALL=C

    # Install system metapackages
    apt-get -y install ubuntu-standard
    apt-get -y install ubuntu-server

    # Add repositories
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION} restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-updates restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-backports restricted"

    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security main"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security universe"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security multiverse"
    add-apt-repository -y "deb ${MIRRORURL} ${OSVERSION}-security restricted"

    # Upgrade all packages to their latest versions
    apt-get -y update && apt-get -y upgrade

    # Install common packages from 'main'
    apt-get -y install autoconf
    apt-get -y install automake
    apt-get -y install build-essential
    apt-get -y install cmake
    apt-get -y install libtool
    apt-get -y install gfortran
    apt-get -y install pkg-config
    apt-get -y install wget
    apt-get -y install zip

    # Install expect to automate responses for interactive build questions
    apt-get -y install expect

    # Use /tmp to store temporary files within the container during the
    # bootstraping process
    cd /tmp

    # Install miniconda3
    wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    chmod +x Miniconda3-latest-Linux-x86_64.sh
    ./Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda3

    # Location of NVIDIA repositories
    declare -r NVIDIA_ROOT_URL='http://developer.download.nvidia.com/compute'
    declare -r CUDA_REPO_URL="${NVIDIA_ROOT_URL}/cuda/repos/ubuntu1804/x86_64"
    declare -r ML_REPO_URL="${NVIDIA_ROOT_URL}/machine-learning/repos/ubuntu1804/x86_64"

    # Install NVIDIA package dependencies
    apt-get -y install x11-common
    apt-get -y install xserver-xorg-core
    apt-get -y install xserver-xorg-legacy
    apt-get -y install cmake
    apt-get -y install make
    apt-get -y install dkms
    apt-get -y install linux-libc-dev
    apt-get -y install libc6-dev
    apt-get -y install lib32gcc1
    apt-get -y install libc6-i386
    apt-get -y install libgl1
    apt-get -y install libwayland-client0
    apt-get -y install libwayland-server0
    apt-get -y install pkg-config
    apt-get -y install screen-resolution-extra
    apt-get -y install libvdpau1
    apt-get -y install libatk1.0-0
    apt-get -y install libcairo-gobject2
    apt-get -y install libcairo2
    apt-get -y install libfontconfig1
    apt-get -y install libgdk-pixbuf2.0-0
    apt-get -y install libgtk-3-0
    apt-get -y install libgtk2.0-0
    apt-get -y install libjansson4
    apt-get -y install freeglut3-dev
    apt-get -y install libx11-dev
    apt-get -y install libxmu-dev
    apt-get -y install libxi-dev
    apt-get -y install libglu1-mesa
    apt-get -y install libglu1-mesa-dev
    apt-get -y install default-jre

    # Download NVIDIA drivers, libraries, and packages
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-common-418_418.67-0ubuntu1_all.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-compute-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-cfg1-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-decode-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-encode-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-fbc1-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-gl-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-ifr1-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libxnvctrl0_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libxnvctrl-dev_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-kernel-source-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-kernel-common-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-dkms-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-compute-utils-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-utils-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/xserver-xorg-video-nvidia-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-driver-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libnvidia-diagnostic-418_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-modprobe_418.67-0ubuntu1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/nvidia-settings_418.67-0ubuntu1_amd64.deb"

    wget --wait=10 "${CUDA_REPO_URL}/cuda-drivers_418.67-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-drivers-diagnostic_418.67-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-compat-10-1_418.67-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-license-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-misc-headers-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvcc-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cuobjdump-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprune-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-compiler-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-driver-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cudart-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvdisasm-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gdb-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvprof-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-memcheck-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cupti-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-gpu-library-advisor-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvtx-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-sanitizer-api-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-command-line-tools-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvrtc-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvml-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvgraph-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvjpeg-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvjpeg-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusolver-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcublas10_10.2.0.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcublas-dev_10.2.0.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cufft-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-curand-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-cusparse-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-npp-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-samples-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-documentation-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nsight-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nsight-compute-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nsight-systems-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-nvvp-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-visual-tools-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-tools-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-dev-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-toolkit-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-libraries-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-runtime-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-demo-suite-10-1_10.1.168-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/cuda-10-1_10.1.168-1_amd64.deb"

    wget --wait=10 "${CUDA_REPO_URL}/libcutensor1_1.0.0-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcutensor-dev_1.0.0-1_amd64.deb"
    wget --wait=10 "${CUDA_REPO_URL}/libcutensor-doc_1.0.0-1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libcudnn7_7.6.5.32-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libcudnn7-dev_7.6.5.32-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnccl2_2.5.6-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnccl-dev_2.5.6-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnvinfer6_6.0.1-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnvinfer-dev_6.0.1-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnvinfer-plugin6_6.0.1-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnvinfer-plugin-dev_6.0.1-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnvonnxparsers6_6.0.1-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnvonnxparsers-dev_6.0.1-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/libnvparsers6_6.0.1-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/libnvparsers-dev_6.0.1-1+cuda10.1_amd64.deb"

    wget --wait=10 "${ML_REPO_URL}/python3-libnvinfer_6.0.1-1+cuda10.1_amd64.deb"
    wget --wait=10 "${ML_REPO_URL}/python3-libnvinfer-dev_6.0.1-1+cuda10.1_amd64.deb"

    # Fix for "update-alternatives: error: error creating symbolic link '/usr/lib/nvidia/alternate-install-present.dpkg-tmp': No such file or directory"
    mkdir -p /usr/lib/nvidia

    # Install NVIDIA drivers, libraries, and packages
    dpkg -i libnvidia-common-418_418.67-0ubuntu1_all.deb
    dpkg -i libnvidia-compute-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-cfg1-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-decode-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-encode-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-fbc1-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-gl-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-ifr1-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libxnvctrl0_418.67-0ubuntu1_amd64.deb
    dpkg -i libxnvctrl-dev_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-kernel-source-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-kernel-common-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-dkms-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-compute-utils-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-utils-418_418.67-0ubuntu1_amd64.deb
    dpkg -i xserver-xorg-video-nvidia-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-driver-418_418.67-0ubuntu1_amd64.deb
    dpkg -i libnvidia-diagnostic-418_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-modprobe_418.67-0ubuntu1_amd64.deb
    dpkg -i nvidia-settings_418.67-0ubuntu1_amd64.deb

    dpkg -i cuda-drivers_418.67-1_amd64.deb
    dpkg -i cuda-drivers-diagnostic_418.67-1_amd64.deb
    dpkg -i cuda-compat-10-1_418.67-1_amd64.deb
    dpkg -i cuda-license-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-misc-headers-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvcc-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cuobjdump-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvprune-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-compiler-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cudart-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-driver-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cudart-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvdisasm-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-gdb-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvprof-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-memcheck-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cupti-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-gpu-library-advisor-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvtx-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-sanitizer-api-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-command-line-tools-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvrtc-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvrtc-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvml-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvgraph-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvgraph-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvjpeg-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvjpeg-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cusolver-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cusolver-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i libcublas10_10.2.0.168-1_amd64.deb
    dpkg -i libcublas-dev_10.2.0.168-1_amd64.deb
    dpkg -i cuda-cufft-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cufft-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-curand-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-curand-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cusparse-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-cusparse-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-npp-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-npp-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-samples-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-documentation-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nsight-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nsight-compute-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nsight-systems-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-nvvp-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-visual-tools-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-tools-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-libraries-dev-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-toolkit-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-libraries-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-runtime-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-demo-suite-10-1_10.1.168-1_amd64.deb
    dpkg -i cuda-10-1_10.1.168-1_amd64.deb

    dpkg -i libcutensor1_1.0.0-1_amd64.deb
    dpkg -i libcutensor-dev_1.0.0-1_amd64.deb
    dpkg -i libcutensor-doc_1.0.0-1_amd64.deb

    dpkg -i libcudnn7_7.6.5.32-1+cuda10.1_amd64.deb
    dpkg -i libcudnn7-dev_7.6.5.32-1+cuda10.1_amd64.deb

    dpkg -i libnccl2_2.5.6-1+cuda10.1_amd64.deb
    dpkg -i libnccl-dev_2.5.6-1+cuda10.1_amd64.deb

    dpkg -i libnvinfer6_6.0.1-1+cuda10.1_amd64.deb
    dpkg -i libnvinfer-dev_6.0.1-1+cuda10.1_amd64.deb

    dpkg -i libnvinfer-plugin6_6.0.1-1+cuda10.1_amd64.deb
    dpkg -i libnvinfer-plugin-dev_6.0.1-1+cuda10.1_amd64.deb

    dpkg -i libnvonnxparsers6_6.0.1-1+cuda10.1_amd64.deb
    dpkg -i libnvonnxparsers-dev_6.0.1-1+cuda10.1_amd64.deb

    dpkg -i libnvparsers6_6.0.1-1+cuda10.1_amd64.deb
    dpkg -i libnvparsers-dev_6.0.1-1+cuda10.1_amd64.deb

    dpkg -i python3-libnvinfer_6.0.1-1+cuda10.1_amd64.deb
    dpkg -i python3-libnvinfer-dev_6.0.1-1+cuda10.1_amd64.deb

    # Set paths to CUDA binaries and libraries
    export PATH="/usr/local/cuda-10.1/bin${PATH:+:${PATH}}"
    export LD_LIBRARY_PATH="/usr/local/cuda-10.1/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"

    # Install basic drivers for user space access to Ethernet, RDMA,
    # and Infiniband. See https://community.mellanox.com/docs/DOC-2431
    apt-get -y install dkms
    apt-get -y install infiniband-diags
    apt-get -y install libibverbs-dev
    apt-get -y install ibacm
    apt-get -y install librdmacm-dev
    apt-get -y install libmlx4-dev
    apt-get -y install libmlx5-dev
    apt-get -y install mstflint
    apt-get -y install libibcm-dev
    apt-get -y install libibmad-dev
    apt-get -y install libibumad-dev
    apt-get -y install opensm
    apt-get -y install srptools

    # Install additional tools
    apt-get -y install ibutils
    apt-get -y install ibverbs-utils
    apt-get -y install rdmacm-utils
    apt-get -y install perftest
    apt-get -y install numactl
    apt-get -y install libnuma-dev

    # Install libnl
    apt-get -y install libnl-3-200
    apt-get -y install libnl-route-3-200
    apt-get -y install libnl-route-3-dev
    apt-get -y install libnl-utils

    # Install OpenMPI dependencies
    apt-get -y install zlib1g-dev

    # Download, build, and install OpenMPI
    wget https://download.open-mpi.org/release/open-mpi/v3.1/openmpi-3.1.4.tar.gz
    tar -xzvf openmpi-3.1.4.tar.gz
    cd openmpi-3.1.4
    ./configure --prefix=/opt/openmpi-3.1.4 --with-cuda
    make all install

    # Set paths to OpenMPI binaries and libraries
    export PATH="/opt/openmpi-3.1.4/bin:${PATH}"
    export LD_LIBRARY_PATH="/opt/openmpi-3.1.4/lib:${LD_LIBRARY_PATH}"

    # Setup conda environment
    export PATH="/opt/miniconda3/bin:${PATH}"
    export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}

    # Install common python packages 
    conda install -y jupyterlab
    conda install -y numpy
    conda install -y matplotlib
    conda install -y pandas
    conda install -y plotly
    conda install -y scipy
    conda install -y scikit-learn
    conda install -y scikit-image
    conda install -y seaborn
    conda install -y statsmodels
    conda install -y opencv

    # Install GPU-accelerated python packages
    conda install -y numba

    # Install additional python packages
    conda install -y astropy
    conda install -y biopython
    conda install -y h5py
    conda install -y nltk
    conda install -y sympy

    # Install PyTorch dependencies 
    conda install -y numpy
    conda install -y ninja
    conda install -y pyyaml
    conda install -y mkl
    conda install -y mkl-include
    conda install -y setuptools
    conda install -y cmake
    conda install -y cffi

    # Add LAPACK support for the GPU
    conda install -y magma-cuda101 -c pytorch

    cd /opt

    # Download, build, and install PyTorch
    git clone --recursive https://github.com/pytorch/pytorch
    cd pytorch
    git checkout v1.4.0
    git submodule sync
    git submodule update --init --recursive

    export CC='mpicc'
    export CXX='mpicxx'
    export CFLAGS='-mtune=generic'

    export BLAS='MKL'
    export USE_FBGEMM=1
    export USE_MKLDNN=1
    export USE_NNPACK=1
    export USE_NUMPY=1
    export USE_QNNPACK=1

    export USE_DISTRIBUTED=1
    export USE_IBVERBS=1
    export USE_GLOO=1
    export USE_MPI=1
    export USE_C10D_MPI=1
    export USE_NCCL=1
    export USE_SYSTEM_NCCL=1
    export NCCL_INCLUDE_DIR='/usr/include'

    export USE_OPENMP=1
    export ATEN_THREADING='OMP'
    export MKL_THREADING='OMP'

    export TORCH_CUDA_ARCH_LIST='3.0;3.5;3.7;5.2;6.0;6.1;7.0;7.5'
    export USE_CUDA=1
    export USE_CUDNN=1

    export USE_FFMPEG=0
    export USE_OPENCV=1

    python setup.py install

    # Download and install vision package for PyTorch
    git clone https://github.com/pytorch/vision.git
    cd vision
    git checkout v0.5.0
    python setup.py install

    cd ../

    # Download and install text package for PyTorch
    git clone https://github.com/pytorch/text.git
    cd text
    git checkout 0.5.0
    python setup.py install

    cd ../

    # Download and install audio package for PyTorch
    git clone https://github.com/pytorch/audio.git
    cd audio
    git checkout v0.4.0
    python setup.py install

    cd ../

    # Download examples for PyTorch
    git clone https://github.com/pytorch/examples.git

    cd /opt

    # Install fastai for PyTorch
    git clone https://github.com/fastai/fastai
    cd fastai
    git checkout 1.0.60
    tools/run-after-git-clone
    pip install -e ".[dev]"

    # Clean up /tmp directory
    cd /tmp
    rm Miniconda3-latest-Linux-x86_64.sh
    rm *.deb
    rm -rf openmpi-3.1.4*

    # Update database for mlocate
    updatedb


%files

%runscript

%test
